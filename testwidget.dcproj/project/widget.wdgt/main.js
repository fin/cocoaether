/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function widget_remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    console.log("hide");
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    console.log("ohai");
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = widget_remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function myDragenterHandler(event)
{
    // Insert Code Here
}

function log(string) {
    console.log(string);
}
/*
function add(obj) {
    console.log("add");
    console.log(objc);
}
function remove(obj) {
    console.log("remove");
    console.log(objc);
}
*/

function dragenter(event)
{
   event.stopPropagation();
   event.preventDefault();
}
function dragover(event)
{
   event.stopPropagation();
   event.preventDefault();
}
function dragleave(event)
{
   event.stopPropagation();
   event.preventDefault();
}

function enable(obj) {
    console.log("enable");
    console.log(objc);
}
function disable(obj) {
    console.log("disable");
    console.log(objc);
}
function select(obj) {
    console.log("select");
    console.log(objc);
}
function unselect(obj) {
    console.log("unselect");
    console.log(objc);
}

var id = 0;
function add(obj) {
    console.log("add");

    var div = document.createElement("div");
    var o = obj;

    div.addEventListener("dragover", function(e) {
            e.dataTransfer.dropEffect = 'move';
            e.dataTransfer.effectAllowed = 'move';
            div.style.cursor = 'move';
            e.preventDefault();
            div.style.fontWeight = "bold";
            return false;
        });
    div.addEventListener("drop", function(e) {
            e.preventDefault();
            log('drop');
            log(o.send_(e.dataTransfer.getData(['text/uri-list'])));
            div.style.fontWeight = "normal";

            return false;
        });
    div.addEventListener("dragenter", function(e) {
            e.preventDefault();
            return false;
        });
    div.addEventListener("dragleave", function(e) {
            e.preventDefault();
            div.style.cursor = null;
            div.style.fontWeight = "normal";
            return false;
        });

    document.getElementById('container').appendChild(div);

    div.innerHTML = obj.getName_();
    div.id = 'element-'+obj.getName_();
    div.classNames = 'item';
    obj.setElement_(obj.getName_());
    id++;

    return obj;
}

function remove(obj) {
    objc.log_("removing: "+obj.getElement_());
    var e = document.getElementById('element-'+obj.getElement_());
    if(!e)
        return;
    e.parentNode.removeChild(e);
    obj.setElement_(null);
    return obj;
}

function initialize_threads() {
    log('initialize threads');
    return TestBundle.startit();
    info_disabled.hide();
    info_enabled.show();
}

var stupidcancelfunctions = {};

function progress(transfer, computer, uri, fraction) {
    var element=document.getElementById('element-'+computer);
    if(!element)
        return;
    var pbar = document.getElementById('element-'+computer+'-uri');
    if(!pbar && fraction<0.99) {
        pbar = document.createElement('div');
        pbar.style.marginLeft='20px';
        pbar.style.marginBottom='7px';
        pbar.style.width='150px';
        pbar.style.height='24px';
        pbar.style.position='relative';
        pbar.style.display='block';
        pbar.style.fontSize='10px';
        pbar.style.lineHeight=1.5;
        pbar.style.verticalAlign='bottom';
        pbar.id = 'element-'+computer+'-uri';
        var pbar2 = document.createElement('div');
        pbar.appendChild(pbar2);
        pbar2.style.height='10px';
        pbar2.style.width=0;
        pbar2.style.backgroundColor='rgb(180,50,50)';
        pbar2.style.position='absolute';
        pbar2.style.top=0;
        pbar2.style.left=0;
        element.appendChild(pbar);
        
        
        
        var a = document.createElement('a');
        var no = Math.random()*1000;
        var trans = transfer;
        stupidcancelfunctions[""+no] = function() {trans.cancel();};
        a.href="javascript:stupidcancelfunctions["+no+"]();";
        a.style.marginLeft='105px';
        a.style.position='absolute'
        a.style.zIndex=100;
        a.style.height='20px';
        a.style.width='20px';
        var img = document.createElement('img');
        img.src="stop.png";
        a.appendChild(img);
        pbar.appendChild(a);
        
        pbar.innerHTML+='<br />'+uri.substr(uri.lastIndexOf('/')+1);
    }
    if(!pbar)
        return;
    var pbar2 = pbar.children[0];
    pbar2.style.width=Math.ceil(100*fraction)+'px';
    if(fraction==1) {
        element.removeChild(pbar);
    }
}
